import sys
sys.stdin = open('sample_input.txt')

"""
# 이진 탐색 트리 -> N이 주어졌을 때 완전 이진 트리로 만든 이진 탐색 트리의 루트에 저장된 값 출력 
# N/2번 노드(N이 홀수인 경우 소수점 버림)에 저장된 값 출력
1. 왼쪽 서브트리 루트 < 현재 노드 < 오른쪽 서브 트리의 루트
2. 중위 순회 방향으로 값이 증가하는 것을 이용하기
3. 완전 이진 트리가 되도록 만들면 효율적인 이진 탐색 트리를 만들 수 있음
* 완전 이진 트리가 가지는 인덱스 번호를 이용하기
"""


# 중위 순회 함수 생성
def inorder(K, N):
    global i
    # 인덱스에 제한을 걸기
    if K <= N:
        # 왼쪽 서브트리 우선 탐색
        inorder(K * 2, N)
        # 현재 노드에 값 부여
        nodes[K] = i
        i += 1
        # 오른쪽 서브트리 탐색
        inorder((K * 2) + 1, N)
    # 인덱스가 N보다 커지면 안되기 때문에 값 반환
    else:
        return


T = int(input())
for tc in range(1, T + 1):
    # 1 부터 N 까지의 자연수를 이진 탐색 트리에 저장
    N = int(input())

    # 노드를 인덱스로 저장(완전 탐색 이진 트리를 이용하기 위함)
    nodes = [0] * (N + 1)
    
    # 인덱스 번호
    K = 1
    # i: 노드에 들어갈 값
    i = 1

    # 함수 사용
    inorder(K, N)

    # 출력
    print(f'#{tc} {nodes[1]} {nodes[N // 2]}')
